---
import Section from '@/components/sections/Section.astro'
import type { RichTextStoryblok } from '@/types/storyblok'
import { isRichTextField } from '@/utils/storyblok/richtext'
import clsx from 'clsx'
import StoryblokRichText from '../storyblok/StoryblokRichText.astro'
import HtmlHeading from '../shared/HtmlHeading.astro'
import RichTextHeading from '../blocks/RichTextHeading.astro'

export type Props = {
  class?: string
  blok: RichTextStoryblok
}

const { class: className, blok, ...props } = Astro.props

const headingSizes = {
  'normal': 'text-32 md:text-35 font-sans font-bold tracking-wide',
  'large': 'text-42 md:text-45 font-sans font-bold tracking-wide uppercase',
}
const sublineSizes = {
  'normal': 'text-22 md:text-25 font-sans tracking-wide uppercase',
  'large': 'text-32 md:text-35 font-sans tracking-wide uppercase',
}
const textSizes = {
  'normal': 'text-22 md:text-25 font-serif',
  'large': 'text-32 md:text-35 font-serif',
}

const headingSize =
  headingSizes[blok.textSize ?? 'normal'] ?? headingSizes['normal']
const sublineSize =
  sublineSizes[blok.textSize ?? 'normal'] ?? sublineSizes['normal']
const textSize = textSizes[blok.textSize ?? 'normal'] ?? textSizes['normal']

const hasHeading = blok.headline || blok.subline
const hasText = isRichTextField(blok.text)
---

<Section
  class={clsx('relative', textSize, className)}
  blok={blok}
  spacing="md"
  {...props}
>
  {
    blok.headline && (
      <Fragment>
        {blok.headlineAsBadge ? (
          <RichTextHeading
            class={clsx('mx-page-mx mb-4 max-w-text')}
            headingOrder={blok.headingOrder}
          >
            {blok.headline}
          </RichTextHeading>
        ) : (
          <HtmlHeading
            class={clsx('mx-page-mx max-w-text', headingSize)}
            order={blok.headingOrder}
          >
            {blok.headline}
          </HtmlHeading>
        )}
      </Fragment>
    )
  }
  {
    blok.subline && (
      <p class={clsx('mx-page-mx max-w-text text-neutral-400', sublineSize)}>
        {blok.subline}
      </p>
    )
  }
  {
    hasText && (
      <StoryblokRichText
        content={blok.text}
        class={clsx(
          'richtext mx-page-mx max-w-text',
          hasHeading && 'mt-3',
          textSize,
        )}
      />
    )
  }
</Section>
