---
import clsx from 'clsx'
import { getThumbnailUrl, getVideoPlayerUrl } from '@/utils/bunny'

// Landspace: de93e5b7-de47-47e2-869b-66115f27be2f
// Portrait: 48a192fa-99a9-4bec-af90-bf25ffa5706a
// Thumbnail: https://vz-7f66f787-c63.b-cdn.net/48a192fa-99a9-4bec-af90-bf25ffa5706a/thumbnail.jpg

// https://vz-7f66f787-c63.b-cdn.net/${videoID}/thumbnail.jpg

// TODO: Embed view token authentication
// https://docs.bunny.net/docs/stream-embed-token-authentication

export type Props = {
  videoID: string
  aspectRatio: '' | '16:9' | '9:16'
}

const { videoID, aspectRatio = '16:9' } = Astro.props

const videoPlayerUrl = getVideoPlayerUrl(videoID, {
  autoplay: false,
  preload: true,
  responsive: true,
  chromecast: false,
  disableAirplay: false,
  disableIosPlayer: true,
  showHeatmap: true,
  muted: true,
  loop: true,
  playsinline: true,
  showSpeed: false,
})
const thumbnailUrl = getThumbnailUrl(videoID)

const aspectRatioClasses = {
  '16:9': 'aspect-16/9',
  '9:16': 'lgmax:aspect-9/16 lg:h-svh lg:w-[56.25svh]',
}
const aspectRatioClass =
  aspectRatioClasses[aspectRatio || '16:9'] ?? aspectRatioClasses['16:9']
---

<div class={clsx('relative overflow-hidden', aspectRatioClass)}>
  <img
    src={thumbnailUrl}
    alt=""
    class="absolute inset-0 object-cover"
    loading="lazy"
  />
  <iframe
    data-video
    src={videoPlayerUrl}
    loading="lazy"
    class="absolute inset-0 h-full w-full border-0"
    allow="accelerometer;gyroscope;autoplay;encrypted-media;picture-in-picture;"
    allowfullscreen="true"></iframe>
</div>

<script>
  import playerjs from 'player.js'

  const videos = document.querySelectorAll('[data-video]')
  videos.forEach((video) => {
    const player = new playerjs.Player(video)
    // @ts-ignore
    video.__player = player
    // player.on('ready', () => {
    //   console.log('ready', video, player)
    // })
  })

  // Auto play/pause video, when in viewport
  const config = {
    rootMargin: '0px -200px',
    threshold: 0,
  }
  const callback = (entries) => {
    entries.forEach((entry) => {
      if (!entry.isIntersecting) {
        entry.target.__player?.pause()
      } else {
        // entry.target.__player?.play()
      }
    })
  }

  const observer = new IntersectionObserver(callback, config)
  videos.forEach((element) => {
    observer.observe(element)
  })
</script>
